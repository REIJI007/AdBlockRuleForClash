# 工作流程名称
name: Convert_Ruleset_YAML_to_MRS

# 触发条件
on:
  schedule:
    - cron: '*/20 * * * *'  # 每20分钟运行一次
  workflow_dispatch:  # 允许手动触发

# 定义作业
jobs:
  update-and-convert:
    runs-on: windows-latest  # 使用 Windows 运行环境
    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # 步骤2：检查并下载 mihomo（仅在第一次运行时）
      - name: Check and download mihomo v1.18.7 if needed
        shell: powershell
        run: |
          $exePath = "./mihomo.exe"
          $downloadMarker = "./.mihomo_downloaded"
          
          # 检查 mihomo.exe 和 .mihomo_downloaded 标记文件是否存在
          if (-not (Test-Path $exePath) -or -not (Test-Path $downloadMarker)) {
            Write-Host "mihomo.exe or .mihomo_downloaded not found, downloading..."
            $url = "https://github.com/MetaCubeX/mihomo/releases/download/v1.18.7/mihomo-windows-amd64-compatible-v1.18.7.zip"
            $zipFile = "mihomo.zip"
            $maxAttempts = 5
            
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              try {
                Write-Host "Downloading mihomo v1.18.7 (Attempt $attempt)..."
                Invoke-WebRequest -Uri $url -OutFile $zipFile -TimeoutSec 300
                
                # 解压和重命名 mihomo.exe
                Expand-Archive -Path $zipFile -DestinationPath . -Force
                Remove-Item -Path $zipFile
                $exeFile = Get-ChildItem -Recurse -Filter "*mihomo*.exe" | Select-Object -First 1
                if ($exeFile) {
                  Rename-Item -Path $exeFile.FullName -NewName $exePath -Force
                  New-Item -Path . -Name ".mihomo_downloaded" -ItemType "file" -Force
                  Write-Host "Extraction and renaming complete!"
                  break
                } else {
                  throw "Executable file not found in the extracted contents"
                }
              } catch {
                Write-Host "Download, extraction, or renaming failed. Error: $_"
                if ($attempt -eq $maxAttempts) {
                  Write-Host "Max attempts reached. Process failed."
                  exit 1
                }
                Start-Sleep -Seconds 10
              }
            }
          } else {
            Write-Host "mihomo.exe and .mihomo_downloaded already exist."
          }

      # 步骤3：转换规则集（依赖于 mihomo.exe）
      - name: Convert ruleset
        shell: powershell
        run: |
          $exePath = "./mihomo.exe"
          
          # 检查 mihomo.exe 是否存在
          if (Test-Path $exePath) {
            Write-Host "Mihomo version:"
            & $exePath -v
            Write-Host "Mihomo help:"
            & $exePath convert-ruleset --help

            # 尝试转换规则集，最多重试5次
            $maxAttempts = 5
            
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              try {
                Write-Host "Attempting conversion (Attempt $attempt)..."
                & $exePath convert-ruleset domain yaml adblock_reject.yaml adblock_reject.mrs
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "Conversion successful!"
                  break
                } else {
                  throw "Conversion failed with exit code $LASTEXITCODE"
                }
              } catch {
                Write-Host "Attempt $attempt failed. Error: $_"
                if ($attempt -eq $maxAttempts) {
                  Write-Host "Max attempts reached. Exiting."
                  exit 1
                }
                Start-Sleep -Seconds 5
              }
            }
          } else {
            Write-Host "mihomo.exe not found, skipping conversion step."
            exit 1
          }

      # 步骤4：提交并推送更改（包括 mihomo.exe 和标记文件）
      - name: Push changes
        shell: powershell
        env:
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          # 配置 Git 用户信息
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          # 拉取最新更改
          git pull https://${{ secrets.TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }} --rebase
          
          # 添加转换后的文件和 mihomo.exe 以及标记文件到 Git
          git add adblock_reject.mrs mihomo.exe .mihomo_downloaded
          
          # 检查是否有更改需要提交
          if (git status --porcelain) {
            # 如果有更改，进行提交
            git commit -m "Update adblock_reject.mrs and add mihomo.exe"
            
            # 推送更改，包含重试机制
            $maxAttempts = 5
            
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              try {
                Write-Host "Attempting to push changes (Attempt $attempt of $maxAttempts)..."
                git push https://${{ secrets.TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
                Write-Host "Changes successfully pushed."
                break
              } catch {
                Write-Host "Push attempt $attempt failed. Error: $_"
                if ($attempt -eq $maxAttempts) {
                  Write-Host "Failed to push changes after $maxAttempts attempts. Exiting."
                  exit 1
                }
                Start-Sleep -Seconds 30
              }
            }
          } else {
            Write-Host "No changes to commit."
          }
