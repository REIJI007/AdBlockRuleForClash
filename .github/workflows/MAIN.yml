name: Sequential Workflow Executor

on:
  workflow_dispatch:
  schedule:
    - cron: '*/20 * * * *'

jobs:
  run_workflows_sequentially:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install @actions/github @actions/core

      - name: Run workflows sequentially
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const github = require('@actions/github');
          const core = require('@actions/core');

          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
          const { owner, repo } = github.context.repo;

          const workflows = [
            "Run_AdBlock_Rule_Generator_YAML.yml",
            "Run_AdBlock_Rule_Generator_TXT.yml",
            "Convert_Ruleset_YAML_to_MRS.yml",
            "Generate_Matcher_Ruleset_entries_CLASH.yml",
            "Generate_Matcher_Ruleset_entries_SURGE.yml",
            "Release_Adblock_file.yml"
          ];

          async function triggerWorkflow(workflow) {
            console.log(`Triggering workflow: ${workflow}`);
            await octokit.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: workflow,
              ref: 'main'
            });
          }

          async function getLatestWorkflowRun(workflow) {
            const { data } = await octokit.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow,
              per_page: 1
            });
            return data.workflow_runs[0];
          }

          async function waitForWorkflowCompletion(workflow) {
            while (true) {
              const run = await getLatestWorkflowRun(workflow);
              if (run.status === 'completed') {
                if (run.conclusion !== 'success') {
                  throw new Error(`Workflow ${workflow} failed with conclusion: ${run.conclusion}`);
                }
                return;
              }
              await new Promise(resolve => setTimeout(resolve, 5000));
            }
          }

          async function runWorkflows() {
            for (const workflow of workflows) {
              await triggerWorkflow(workflow);
              await waitForWorkflowCompletion(workflow);
              console.log(`Workflow ${workflow} completed successfully`);
            }
          }

          runWorkflows().catch(error => {
            core.setFailed(`Workflow execution failed: ${error.message}`);
          });
        shell: node {0}

      - name: Check for failures
        if: failure()
        run: |
          echo "One or more workflows failed. Please check the logs for details."
          exit 1
